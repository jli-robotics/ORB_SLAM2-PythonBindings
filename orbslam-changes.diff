diff --git a/CMakeLists.txt b/CMakeLists.txt
index 08a8af4..ae72014 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -111,3 +111,28 @@ add_executable(mono_euroc
 Examples/Monocular/mono_euroc.cc)
 target_link_libraries(mono_euroc ${PROJECT_NAME})
 
+# ---------------
+# Installation instructions.
+# Will install to CMAKE_INSTALL_PREFIX
+# This defaults to /usr/local/, specify -DCMAKE_INSTALL_PREFIX when calling cmake to specify an alternate location
+# e.g. cmake -DCMAKE_INSTALL_PREFIX="~/local"
+# ---------------
+
+install(TARGETS ${PROJECT_NAME}
+    DESTINATION  lib
+    COMPONENT library)
+install(FILES
+        ${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
+        ${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.so
+    DESTINATION lib
+    COMPONENT library)
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/
+    DESTINATION include/ORB_SLAM2
+    COMPONENT library
+    FILES_MATCHING PATTERN "*.h"
+    PATTERN "Thirdparty" EXCLUDE)
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/Thirdparty/
+    DESTINATION include/ORB_SLAM2/Thirdparty
+    COMPONENT library
+FILES_MATCHING REGEX ".*\\.h(pp)?")
+
diff --git a/include/System.h b/include/System.h
index b377b45..84b3a27 100644
--- a/include/System.h
+++ b/include/System.h
@@ -119,8 +119,13 @@ public:
     // Information from most recent processed frame
     // You can call this right after TrackMonocular (or stereo or RGBD)
     int GetTrackingState();
+    vector<KeyFrame*> GetKeyFrames() const;
+    Tracking* GetTracker() const;
     std::vector<MapPoint*> GetTrackedMapPoints();
-    std::vector<cv::KeyPoint> GetTrackedKeyPointsUn();
+    std::vector<cv::KeyPoint> GetTrackedKeyPointsUn();   
+
+    // Map structure that stores the pointers to all KeyFrames and MapPoints.
+    Map* mpMap;
 
 private:
 
@@ -133,8 +138,6 @@ private:
     // KeyFrame database for place recognition (relocalization and loop detection).
     KeyFrameDatabase* mpKeyFrameDatabase;
 
-    // Map structure that stores the pointers to all KeyFrames and MapPoints.
-    Map* mpMap;
 
     // Tracker. It receives a frame and computes the associated camera pose.
     // It also decides when to insert a new keyframe, create some new MapPoints and
diff --git a/src/System.cc b/src/System.cc
index 8df4157..f5e0c60 100644
--- a/src/System.cc
+++ b/src/System.cc
@@ -477,6 +477,16 @@ int System::GetTrackingState()
     return mTrackingState;
 }
 
+vector<KeyFrame*> System::GetKeyFrames() const
+{
+    return mpMap->GetAllKeyFrames();
+}
+
+Tracking* System::GetTracker() const
+{
+    return mpTracker;
+}
+
 vector<MapPoint*> System::GetTrackedMapPoints()
 {
     unique_lock<mutex> lock(mMutexState);
diff --git a/src/Tracking.cc b/src/Tracking.cc
index 2273b2c..2169835 100644
--- a/src/Tracking.cc
+++ b/src/Tracking.cc
@@ -577,7 +577,7 @@ void Tracking::MonocularInitialization()
             if(mpInitializer)
                 delete mpInitializer;
 
-            mpInitializer =  new Initializer(mCurrentFrame,1.0,200);
+            mpInitializer =  new Initializer(mCurrentFrame,1.0,1000);
 
             fill(mvIniMatches.begin(),mvIniMatches.end(),-1);
 
